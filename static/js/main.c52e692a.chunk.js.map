{"version":3,"sources":["Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Header.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js","assets/noPosterSmall.JPG"],"names":["Container","styled","div","Title","span","Grid","Section","title","children","role","aria-label","Text","props","color","Message","text","Image","bgUrl","Rating","ImageContainer","Year","Poster","id","imageUrl","rating","year","isMovie","to","require","length","substring","TVPresenter","nowPlaying","popular","upcoming","loading","error","Loader","map","movie","key","original_title","poster_path","vote_average","release_date","api","axios","create","baseURL","params","api_key","language","moviesApi","get","movieDetail","append_to_response","search","term","query","encodeURIComponent","tvApi","topRated","airingToday","showDetail","HomeContainer","state","data","results","this","setState","HomePresenter","React","Component","show","original_name","first_air_date","TVContainer","console","log","Form","form","Input","input","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","SearchContainer","event","preventDefault","searchByTerm","target","a","Backdrop","bgImage","Content","Cover","Data","h3","ItemContainer","Item","Divider","Overview","p","ImdbLink","ProductionImage","img","NoImg","ProductionName","DetailPresenter","result","backdrop_path","runtime","episode_run_time","genres","genre","index","name","imdb_id","href","overview","videos","width","height","src","allow","allowFullScreen","production_companies","production","logo_path","DetailContainer","pathname","location","includes","match","push","history","parsedId","parseInt","isNaN","Header","header","List","ul","li","current","SLink","Link","withRouter","path","exact","component","Home","TV","Search","Detail","from","globalStyles","createGlobalStyle","reset","App","Router","GlobalStyles","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.c52e692a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  :not(:last-child) {\r\n    margin-bottom: 50px;\r\n  }\r\n`;\r\n\r\nconst Title = styled.span`\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n`;\r\nconst Grid = styled.div`\r\n  margin-top: 25px;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, 125px);\r\n  grid-gap: 25px;\r\n`;\r\n\r\nconst Section = ({ title, children }) => (\r\n  <Container>\r\n    <Title>{title}</Title>\r\n    <Grid>{children}</Grid>\r\n  </Container>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.node),\r\n    PropTypes.node\r\n  ])\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  height: 100vh;\r\n  width: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  font-size: 25px;\r\n  margin-top: 20px;\r\n`;\r\n\r\nexport default () => (\r\n  <Container>\r\n    <span role=\"img\" aria-label=\"Loading\">\r\n      ⏰\r\n    </span>\r\n  </Container>\r\n);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  width: 100vw;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\nconst Text = styled.span`\r\n  color: ${props => props.color};\r\n`;\r\n\r\nconst Message = ({ text, color }) => (\r\n  <Container>\r\n    <Text color={color}>{text}</Text>\r\n  </Container>\r\n);\r\n\r\nMessage.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n  color: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  font-size: 12px;\r\n`;\r\nconst Image = styled.div`\r\n  background-image: url(${props => props.bgUrl});\r\n  height: 180px;\r\n  background-size: cover;\r\n  border-radius: 4px;\r\n  background-position: center center;\r\n  transition: opacity 0.1s linear;\r\n`;\r\nconst Rating = styled.span`\r\n  bottom: 5px;\r\n  right: 5px;\r\n  opacity: 0;\r\n  position: absolute;\r\n  transition: opacity 0.1s linear;\r\n`;\r\nconst ImageContainer = styled.div`\r\n  margin-bottom: 5px;\r\n  position: relative;\r\n  &:hover {\r\n    ${Image} {\r\n      opacity: 0.3;\r\n    }\r\n    ${Rating} {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Title = styled.span`\r\n  display: block;\r\n\r\n  margin-bottom: 3px;\r\n`;\r\nconst Year = styled.span`\r\n  font-size: 10px;\r\n  color: rgba(255, 255, 255, 0.5);\r\n`;\r\n\r\nconst Poster = ({ id, imageUrl, title, rating, year, isMovie = false }) => (\r\n  <Link to={isMovie ? `/movie/${id}` : `/show/${id}`}>\r\n    <Container>\r\n      <ImageContainer>\r\n        <Image\r\n          bgUrl={\r\n            imageUrl\r\n              ? `https://image.tmdb.org/t/p/w500${imageUrl}`\r\n              : require(\"../assets/noPosterSmall.JPG\")\r\n          }\r\n        ></Image>\r\n        {rating ? (\r\n          <Rating>\r\n            <span role=\"img\" aria-label=\"rating\">\r\n              ⭐️\r\n            </span>{\" \"}\r\n            {rating}/10\r\n          </Rating>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </ImageContainer>\r\n      {title ? (\r\n        <Title>\r\n          {title.length > 18 ? `${title.substring(0, 15)}...` : title}\r\n        </Title>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      {year ? <Year>{year}</Year> : \"\"}\r\n    </Container>\r\n  </Link>\r\n);\r\n\r\nPoster.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  imageUrl: PropTypes.string,\r\n  title: PropTypes.string.isRequired,\r\n  rating: PropTypes.number,\r\n  year: PropTypes.string,\r\n  isMovie: PropTypes.bool\r\n};\r\n\r\nexport default Poster;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Section from \"Components/Section\";\r\nimport Loader from \"Components/Loader\";\r\nimport Message from \"Components/Message\";\r\nimport Poster from \"Components/Poster\";\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst TVPresenter = ({ nowPlaying, popular, upcoming, loading, error }) => (\r\n  <>\r\n    <Helmet>\r\n      <title>Movies | Nomflix</title>\r\n    </Helmet>\r\n    {loading ? (\r\n      <Loader />\r\n    ) : (\r\n      <Container>\r\n        <Helmet>\r\n          <title>Movies | Nomflix</title>\r\n        </Helmet>\r\n\r\n        {nowPlaying && nowPlaying.length > 0 && (\r\n          <Section title=\"Now Playing\">\r\n            {nowPlaying.map(movie => (\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                title={movie.original_title}\r\n                imageUrl={movie.poster_path}\r\n                isMovie={true}\r\n                rating={movie.vote_average}\r\n                year={movie.release_date.substring(0, 4)}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {upcoming && upcoming.length > 0 && (\r\n          <Section title=\"Upcoming Movies\">\r\n            {upcoming.map(movie => (\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                title={movie.original_title}\r\n                imageUrl={movie.poster_path}\r\n                isMovie={true}\r\n                rating={movie.vote_average}\r\n                year={movie.release_date.substring(0, 4)}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {popular && popular.length > 0 && (\r\n          <Section title=\"Popular Movies\">\r\n            {popular.map(movie => (\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                title={movie.original_title}\r\n                imageUrl={movie.poster_path}\r\n                isMovie={true}\r\n                rating={movie.vote_average}\r\n                year={movie.release_date.substring(0, 4)}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {error && <Message color=\"#e74c3c\" text={error} />}\r\n      </Container>\r\n    )}\r\n  </>\r\n);\r\n\r\nTVPresenter.propTypes = {\r\n  nowPlaying: PropTypes.array,\r\n  popular: PropTypes.array,\r\n  upcoming: PropTypes.array,\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string\r\n};\r\n\r\nexport default TVPresenter;\r\n","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3/\",\r\n  params: {\r\n    api_key: \"9470d87ba22e71b5441b3208218e5f2f\",\r\n    language: \"en-US\"\r\n  }\r\n});\r\n\r\n//api.get(\"tv/popular\");  /로 시작하면 덮어쓰게됨 절대경로를 의미 상대경로로 써줘야함\r\n\r\nexport const moviesApi = {\r\n  nowPlaying: () => api.get(\"movie/now_playing\"),\r\n  upcoming: () => api.get(\"movie/upcoming\"),\r\n  popular: () => api.get(\"movie/popular\"),\r\n  movieDetail: id =>\r\n    api.get(`movie/${id}`, {\r\n      params: {\r\n        append_to_response: \"videos\"\r\n      }\r\n    }),\r\n  search: term =>\r\n    api.get(\"search/movie\", {\r\n      params: {\r\n        query: encodeURIComponent(term)\r\n      }\r\n    })\r\n};\r\n\r\nexport const tvApi = {\r\n  topRated: () => api.get(\"tv/top_rated\"),\r\n  popular: () => api.get(\"tv/popular\"),\r\n  airingToday: () => api.get(\"tv/airing_today\"),\r\n  showDetail: id => api.get(`tv/${id}`),\r\n  search: term =>\r\n    api.get(\"search/tv\", {\r\n      params: {\r\n        query: encodeURIComponent(term)\r\n      }\r\n    })\r\n};\r\n","import HomeContainer from \"./HomeContainer\";\r\n\r\nexport default HomeContainer;\r\n","import React from \"react\";\r\nimport HomePresenter from \"./HomePresenter\";\r\nimport { moviesApi } from \"api\";\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    nowPlaying: null,\r\n    upcoming: null,\r\n    popular: null,\r\n    error: null,\r\n    loading: true\r\n  };\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const {\r\n        data: { results: nowPlaying }\r\n      } = await moviesApi.nowPlaying();\r\n\r\n      const {\r\n        data: { results: upcoming }\r\n      } = await moviesApi.upcoming();\r\n\r\n      const {\r\n        data: { results: popular }\r\n      } = await moviesApi.popular();\r\n\r\n      this.setState({\r\n        nowPlaying,\r\n        upcoming,\r\n        popular\r\n      });\r\n    } catch {\r\n      this.setState({\r\n        error: \"Can't find movies information.\"\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        loading: false\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { nowPlaying, upcoming, popular, error, loading } = this.state;\r\n    return (\r\n      <HomePresenter\r\n        nowPlaying={nowPlaying}\r\n        upcoming={upcoming}\r\n        popular={popular}\r\n        error={error}\r\n        loading={loading}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Section from \"Components/Section\";\r\nimport Loader from \"Components/Loader\";\r\nimport Message from \"Components/Message\";\r\nimport Poster from \"Components/Poster\";\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst TVPresenter = ({ topRated, popular, airingToday, loading, error }) => (\r\n  <>\r\n    <Helmet>\r\n      <title>TV Shows | Nomflix</title>\r\n    </Helmet>\r\n    {loading ? (\r\n      <Loader />\r\n    ) : (\r\n      <Container>\r\n        {topRated && topRated.length > 0 && (\r\n          <Section title=\"Top Rated Shows\">\r\n            {topRated.map(show => (\r\n              <Poster\r\n                key={show.id}\r\n                id={show.id}\r\n                title={show.original_name}\r\n                imageUrl={show.poster_path}\r\n                rating={show.vote_average}\r\n                year={show.first_air_date.substring(0, 4)}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n\r\n        {popular && popular.length > 0 && (\r\n          <Section title=\"Popular Shows\">\r\n            {popular.map(show => (\r\n              <Poster\r\n                key={show.id}\r\n                id={show.id}\r\n                title={show.original_name}\r\n                imageUrl={show.poster_path}\r\n                rating={show.vote_average}\r\n                year={show.first_air_date.substring(0, 4)}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n\r\n        {airingToday && airingToday.length > 0 && (\r\n          <Section title=\"Airing Today\">\r\n            {airingToday.map(show => (\r\n              <Poster\r\n                key={show.id}\r\n                id={show.id}\r\n                title={show.original_name}\r\n                imageUrl={show.poster_path}\r\n                rating={show.vote_average}\r\n                year={show.first_air_date.substring(0, 4)}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {error && <Message color=\"#e74c3c\" text={error} />}\r\n      </Container>\r\n    )}\r\n    ;\r\n  </>\r\n);\r\n\r\nTVPresenter.propTypes = {\r\n  topRated: PropTypes.array,\r\n  popular: PropTypes.array,\r\n  airingToday: PropTypes.array,\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string\r\n};\r\n\r\nexport default TVPresenter;\r\n","import TVContainer from \"./TVContainer\";\r\n\r\nexport default TVContainer;\r\n","import React from \"react\";\r\nimport TVPresenter from \"./TVPresenter\";\r\nimport { tvApi } from \"api\";\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    topRated: null,\r\n    popular: null,\r\n    airingToday: null,\r\n    loading: true,\r\n    error: null\r\n  };\r\n\r\n  async componentDidMount() {\r\n    //componentDidMount=async()=>이거랑 같음\r\n    try {\r\n      const {\r\n        data: { results: topRated }\r\n      } = await tvApi.topRated();\r\n      const {\r\n        data: { results: popular }\r\n      } = await tvApi.popular();\r\n      const {\r\n        data: { results: airingToday }\r\n      } = await tvApi.airingToday();\r\n\r\n      this.setState({ topRated, popular, airingToday });\r\n    } catch {\r\n      this.setState({\r\n        error: \"Can't find TV information.\"\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        loading: false\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { topRated, popular, airingToday, loading, error } = this.state;\r\n    console.log(this.state);\r\n    return (\r\n      <TVPresenter\r\n        topRated={topRated}\r\n        popular={popular}\r\n        airingToday={airingToday}\r\n        loading={loading}\r\n        error={error}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Loader from \"Components/Loader\";\r\nimport Section from \"Components/Section\";\r\nimport Message from \"Components/Message\";\r\nimport Poster from \"Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n  padding: 0px 20px;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  margin-bottom: 50px;\r\n  width: 100%;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  all: unset;\r\n  font-size: 28px;\r\n  width: 100%;\r\n`;\r\n\r\nconst SearchPresenter = ({\r\n  movieResults,\r\n  tvResults,\r\n  loading,\r\n  searchTerm,\r\n  handleSubmit,\r\n  error,\r\n  updateTerm\r\n}) => (\r\n  <Container>\r\n    <Helmet>\r\n      <title>Search | Nomflix</title>\r\n    </Helmet>\r\n    <Form onSubmit={handleSubmit}>\r\n      <Input\r\n        placeholder=\"Search Movies or TV Shows...\"\r\n        value={searchTerm}\r\n        onChange={updateTerm}\r\n      />\r\n    </Form>\r\n\r\n    {loading ? (\r\n      <Loader />\r\n    ) : (\r\n      <>\r\n        {movieResults && movieResults.length > 0 && (\r\n          <Section title=\"Movie Results\">\r\n            {movieResults.map(movie => (\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                title={movie.original_title}\r\n                imageUrl={movie.poster_path}\r\n                isMovie={true}\r\n                rating={movie.vote_average}\r\n                year={movie.release_date.substring(0, 4)}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n\r\n        {tvResults && tvResults.length > 0 && (\r\n          <Section title=\"TV Shows Results\">\r\n            {tvResults.map(show => (\r\n              <Poster\r\n                key={show.id}\r\n                id={show.id}\r\n                title={show.original_name}\r\n                imageUrl={show.poster_path}\r\n                rating={show.vote_average}\r\n                year={show.first_air_date.substring(0, 4)}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n      </>\r\n    )}\r\n    {error && <Message color=\"#e74c3c\" text={error} />}\r\n    {tvResults &&\r\n      movieResults &&\r\n      tvResults.length === 0 &&\r\n      movieResults.length === 0 && (\r\n        <Message text=\"Nothing found\" color=\"#95a5a6\" />\r\n      )}\r\n  </Container>\r\n);\r\n\r\nSearchPresenter.propTypes = {\r\n  movieResults: PropTypes.array,\r\n  tvResults: PropTypes.array,\r\n  error: PropTypes.string,\r\n  searchTerm: PropTypes.string,\r\n  loading: PropTypes.bool.isRequired,\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  updateTerm: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SearchPresenter;\r\n","import SearchContainer from \"./SearchContainer\";\r\n\r\nexport default SearchContainer;\r\n","import React from \"react\";\r\nimport SearchPresenter from \"./SearchPresenter\";\r\nimport { createCipher } from \"crypto\";\r\nimport { moviesApi, tvApi } from \"api\";\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    movieResults: null,\r\n    tvResults: null,\r\n    searchTerm: \"\",\r\n    loading: false,\r\n    error: null\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault(); //form이 있는 창에서 enter를 누르면 submit 되는것을 막아줌\r\n    const { searchTerm } = this.state;\r\n    if (searchTerm !== \"\") {\r\n      this.searchByTerm();\r\n    }\r\n  };\r\n\r\n  updateTerm = event => {\r\n    const {\r\n      target: { value }\r\n    } = event;\r\n    this.setState({\r\n      searchTerm: value\r\n    });\r\n  };\r\n\r\n  searchByTerm = async () => {\r\n    const { searchTerm } = this.state;\r\n    this.setState({ loading: true });\r\n    try {\r\n      const {\r\n        data: { results: movieResults }\r\n      } = await moviesApi.search(searchTerm);\r\n      const {\r\n        data: { results: tvResults }\r\n      } = await tvApi.search(searchTerm);\r\n      this.setState({\r\n        movieResults,\r\n        tvResults\r\n      });\r\n\r\n      this.setState({ loading: true });\r\n    } catch {\r\n      this.setState({ error: \"Can't find results.\" });\r\n    } finally {\r\n      this.setState({ loading: false });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { movieResults, tvResults, searchTerm, loading, error } = this.state;\r\n\r\n    return (\r\n      <SearchPresenter\r\n        movieResults={movieResults}\r\n        tvResults={tvResults}\r\n        searchTerm={searchTerm}\r\n        loading={loading}\r\n        error={error}\r\n        handleSubmit={this.handleSubmit}\r\n        updateTerm={this.updateTerm}\r\n      />\r\n    );\r\n  }\r\n}\r\n","/* eslint-disable */\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Loader from \"Components/Loader\";\r\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\r\nimport \"react-tabs/style/react-tabs.css\";\r\nimport Poster from \"../../../src/Components/Poster\";\r\nimport Section from \"../../../src/Components/Section\";\r\n\r\nconst Container = styled.div`\r\n  height: calc(100vh - 50px);\r\n  width: 100%;\r\n  position: relative;\r\n  padding: 50px;\r\n`;\r\n\r\nconst Backdrop = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-image: url(${props => props.bgImage});\r\n  background-position: center center;\r\n  background-size: cover;\r\n  filter: blur(3px);\r\n  opacity: 0.5;\r\n  z-index: 0;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n  position: relative;\r\n  z-index: 1;\r\n`;\r\nconst Cover = styled.div`\r\n  width: 30%;\r\n  background-image: url(${props => props.bgImage});\r\n  background-position: center center;\r\n  background-size: cover;\r\n  height: 100%;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst Data = styled.div`\r\n  width: 70%;\r\n  margin-left: 10px;\r\n`;\r\n\r\nconst Title = styled.h3`\r\n  font-size: 32px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst ItemContainer = styled.div`\r\n  margin: 20px 0;\r\n`;\r\n\r\nconst Item = styled.span``;\r\n\r\nconst Divider = styled.span`\r\n  margin: 0 10px;\r\n`;\r\n\r\nconst Overview = styled.p`\r\n  font-size: 12px;\r\n  opacity: 0.7;\r\n  line-height: 1.5;\r\n  width: 50%;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst ImdbLink = styled.a`\r\n  display: inline-block;\r\n  border-radius: 3px;\r\n  padding: 0.5rem 0;\r\n  margin: 0.5rem 1rem;\r\n  width: 6rem;\r\n  background: transparent;\r\n  color: white;\r\n  border: 2px solid white;\r\n  text-align: center;\r\n\r\n  &:hover {\r\n    background-color: palevioletred;\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst ProductionImage = styled.img`\r\n  width: 100px;\r\n  height: 100px;\r\n`;\r\n\r\nconst NoImg = styled.div`\r\n  height: 100px;\r\n  background-image: url(${props => props.bgImage});\r\n  background-position: center center;\r\n  background-size: cover;\r\n`;\r\n\r\nconst ImageContainer = styled.div`\r\n  margin-bottom: 5px;\r\n  position: relative;\r\n`;\r\n\r\nconst ProductionName = styled.span`\r\n  display: block;\r\n  margin-bottom: 3px;\r\n`;\r\n\r\nconst Grid = styled.div`\r\n  margin-top: 25px;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, 125px);\r\n  grid-gap: 25px;\r\n`;\r\n\r\nconst DetailPresenter = ({ result, loading, error }) =>\r\n  loading ? (\r\n    <>\r\n      <Helmet>\r\n        <title>Loading | Nomflix</title>\r\n      </Helmet>\r\n      <Loader />\r\n    </>\r\n  ) : (\r\n    <Container>\r\n      <Helmet>\r\n        <title>\r\n          {result.original_title ? result.original_title : result.original_name}{\" \"}\r\n          | Nomflix\r\n        </title>\r\n      </Helmet>\r\n      <Backdrop\r\n        bgImage={`https://image.tmdb.org/t/p/original${result.backdrop_path}`}\r\n      ></Backdrop>\r\n\r\n      <Content>\r\n        <Cover\r\n          bgImage={\r\n            result.poster_path\r\n              ? `https://image.tmdb.org/t/p/original${result.poster_path}`\r\n              : require(\"D:/NomadReactjs/nomflix/src/assets/noPosterSmall.JPG\")\r\n          }\r\n        ></Cover>\r\n        <Data>\r\n          <Title>\r\n            {result.original_title\r\n              ? result.original_title\r\n              : result.original_name}\r\n          </Title>\r\n          <ItemContainer>\r\n            <Item>\r\n              {result.release_date\r\n                ? result.release_date.substring(0, 4)\r\n                : result.first_air_date.substring(0, 4)}\r\n            </Item>\r\n            <Divider>*</Divider>\r\n            <Item>\r\n              {result.runtime ? result.runtime : result.episode_run_time[0]} min\r\n            </Item>\r\n            <Divider>*</Divider>\r\n            <Item>\r\n              {result.genres &&\r\n                result.genres.map((genre, index) =>\r\n                  index === result.genres.length - 1\r\n                    ? genre.name\r\n                    : `${genre.name} / `\r\n                )}\r\n            </Item>\r\n\r\n            {result.imdb_id ? (\r\n              <>\r\n                <Divider>*</Divider>\r\n                <Item>\r\n                  <ImdbLink\r\n                    href={`https://www.imdb.com/title/${result.imdb_id}`}\r\n                  >\r\n                    IMDB LINK\r\n                  </ImdbLink>\r\n                </Item>\r\n              </>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </ItemContainer>\r\n          <Overview>{result.overview}</Overview>\r\n          <Tabs>\r\n            <TabList>\r\n              {result.videos ? <Tab>Video</Tab> : \"\"}\r\n              <Tab>Production</Tab>\r\n            </TabList>\r\n\r\n            {result.videos ? (\r\n              <TabPanel>\r\n                <iframe\r\n                  width=\"560\"\r\n                  height=\"235\"\r\n                  src={`https://www.youtube.com/embed/${result.videos.results[0].key}`}\r\n                  allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n                  allowFullScreen\r\n                ></iframe>\r\n              </TabPanel>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n\r\n            <TabPanel>\r\n              <Grid>\r\n                {result.production_companies.map(production =>\r\n                  production.logo_path ? (\r\n                    <ImageContainer>\r\n                      <ProductionImage\r\n                        src={`https://image.tmdb.org/t/p/original${production.logo_path}`}\r\n                      ></ProductionImage>\r\n                      <ProductionName>{production.name}</ProductionName>\r\n                    </ImageContainer>\r\n                  ) : (\r\n                    <ImageContainer>\r\n                      <NoImg\r\n                        bgImage={require(\"../../assets/noPosterSmall.JPG\")}\r\n                      ></NoImg>\r\n                      <ProductionName>{production.name}</ProductionName>\r\n                    </ImageContainer>\r\n                  )\r\n                )}\r\n              </Grid>\r\n            </TabPanel>\r\n          </Tabs>\r\n        </Data>\r\n      </Content>\r\n    </Container>\r\n  );\r\n\r\nDetailPresenter.propTypes = {\r\n  result: PropTypes.object,\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string\r\n};\r\n\r\nexport default DetailPresenter;\r\n","import DetailContainer from \"./DetailContainer\";\r\n\r\nexport default DetailContainer;\r\n","import React from \"react\";\r\nimport DetailPresenter from \"./DetailPresenter\";\r\nimport { moviesApi, tvApi } from \"../../api\";\r\n\r\nexport default class extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const {\r\n      location: { pathname }\r\n    } = props;\r\n    this.state = {\r\n      result: null,\r\n      error: null,\r\n      loading: true,\r\n      isMovie: pathname.includes(\"/movie/\")\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const {\r\n      match: {\r\n        params: { id }\r\n      },\r\n      history: { push }\r\n    } = this.props;\r\n    const { isMovie } = this.state;\r\n    const parsedId = parseInt(id);\r\n    if (isNaN(parsedId)) {\r\n      return push(\"/\");\r\n    }\r\n    let result = null;\r\n    try {\r\n      if (isMovie) {\r\n        ({ data: result } = await moviesApi.movieDetail(parsedId));\r\n      } else {\r\n        ({ data: result } = await tvApi.showDetail(parsedId));\r\n      }\r\n    } catch {\r\n      this.setState({ error: \"Can't find anything.\" });\r\n    } finally {\r\n      this.setState({ loading: false, result });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { result, error, loading } = this.state;\r\n    console.log(result);\r\n    //console.log(result.production_companies);\r\n    return <DetailPresenter result={result} error={error} loading={loading} />;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Header = styled.header`\r\n  color: white;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0px 10px;\r\n  background-color: rgba(20, 20, 20, 0.8);\r\n  z-index: 10;\r\n  box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\r\n`;\r\n\r\nconst List = styled.ul`\r\n  display: flex;\r\n`;\r\n\r\nconst Item = styled.li`\r\n  width: 80px;\r\n  height: 50px;\r\n  text-align: center;\r\n  border-bottom: 3px solid\r\n    ${props => (props.current ? \"#3498db\" : \"transparent\")};\r\n  transition: border-bottom 0.5s ease-in-out;\r\n`;\r\n\r\nconst SLink = styled(Link)`\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default withRouter(({ location: { pathname } }) => (\r\n  <Header>\r\n    <List>\r\n      <Item current={pathname === \"/\"}>\r\n        <SLink to=\"/\">Movies</SLink>\r\n      </Item>\r\n\r\n      <Item current={pathname === \"/tv\"}>\r\n        <SLink to=\"/tv\">TV</SLink>\r\n      </Item>\r\n\r\n      <Item current={pathname === \"/search\"}>\r\n        <SLink to=\"/search\">Search</SLink>\r\n      </Item>\r\n    </List>\r\n  </Header>\r\n));\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Redirect,\r\n  Switch\r\n} from \"react-router-dom\";\r\nimport Home from \"Routes/Home\";\r\nimport TV from \"Routes/TV\";\r\nimport Search from \"Routes/Search\";\r\nimport Detail from \"Routes/Detail\";\r\nimport Header from \"Components/Header\";\r\n\r\nexport default () => (\r\n  <Router>\r\n    <>\r\n      <Header />\r\n      <Switch>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/tv\" component={TV} />\r\n        <Route path=\"/search\" component={Search} />\r\n        <Route path=\"/movie/:id\" component={Detail} />\r\n        <Route path=\"/show/:id\" component={Detail} />\r\n        <Redirect from=\"*\" to=\"/\" />\r\n      </Switch>\r\n    </>\r\n  </Router>\r\n);\r\n","import { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\nconst globalStyles = createGlobalStyle`\r\n    ${reset};\r\n    a{\r\n        text-decoration:none;\r\n        color:inherit;\r\n    }\r\n    *{\r\n        box-sizing:border-box;\r\n    }\r\n    body{\r\n        font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n        font-size:12px;\r\n        background-color:rgba(20,20,20,1);\r\n        color:white;\r\n        padding-top:50px;\r\n    }\r\n\r\n\r\n`;\r\n\r\nexport default globalStyles;\r\n","import React, { Component } from \"react\";\nimport Router from \"Components/Router\";\nimport GlobalStyles from \"Components/GlobalStyles\";\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Router />\n        <GlobalStyles />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"Components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","module.exports = __webpack_public_path__ + \"static/media/noPosterSmall.eabec727.JPG\";"],"sourceRoot":""}